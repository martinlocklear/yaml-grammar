// Generated by CoffeeScript 2.5.1
(function() {
  /*
  This grammar class was generated from https://yaml.org/spec/1.2/spec.html
  */
  var Grammar;

  global.Grammar = Grammar = (function() {
    class Grammar {
      TOP() {
        return this.l_yaml_stream;
      }

      c_printable() {
        debug1("c_printable");
        return this.any(this.chr("\u{09}"), this.chr("\u{0A}"), this.chr("\u{0D}"), this.rng("\u{20}", "\u{7E}"), this.chr("\u{85}"), this.rng("\u{A0}", "\u{D7FF}"), this.rng("\u{E000}", "\u{FFFD}"), this.rng("\u{010000}", "\u{10FFFF}"));
      }

      nb_json() {
        debug1("nb_json");
        return this.any(this.chr("\u{09}"), this.rng("\u{20}", "\u{10FFFF}"));
      }

      c_byte_order_mark() {
        debug1("c_byte_order_mark");
        return this.chr("\u{FEFF}");
      }

      c_sequence_entry() {
        debug1("c_sequence_entry");
        return this.chr('-');
      }

      c_mapping_key() {
        debug1("c_mapping_key");
        return this.chr('?');
      }

      c_mapping_value() {
        debug1("c_mapping_value");
        return this.chr(':');
      }

      c_collect_entry() {
        debug1("c_collect_entry");
        return this.chr(',');
      }

      c_sequence_start() {
        debug1("c_sequence_start");
        return this.chr('[');
      }

      c_sequence_end() {
        debug1("c_sequence_end");
        return this.chr(']');
      }

      c_mapping_start() {
        debug1("c_mapping_start");
        return this.chr('{');
      }

      c_mapping_end() {
        debug1("c_mapping_end");
        return this.chr('}');
      }

      c_comment() {
        debug1("c_comment");
        return this.chr('#');
      }

      c_anchor() {
        debug1("c_anchor");
        return this.chr('&');
      }

      c_alias() {
        debug1("c_alias");
        return this.chr('*');
      }

      c_tag() {
        debug1("c_tag");
        return this.chr('!');
      }

      c_literal() {
        debug1("c_literal");
        return this.chr('|');
      }

      c_folded() {
        debug1("c_folded");
        return this.chr('>');
      }

      c_single_quote() {
        debug1("c_single_quote");
        return this.chr("'");
      }

      c_double_quote() {
        debug1("c_double_quote");
        return this.chr('"');
      }

      c_directive() {
        debug1("c_directive");
        return this.chr('%');
      }

      c_reserved() {
        debug1("c_reserved");
        return this.any(this.chr('@'), this.chr('`'));
      }

      c_indicator() {
        debug1("c_indicator");
        return this.any(this.chr('-'), this.chr('?'), this.chr(':'), this.chr(','), this.chr('['), this.chr(']'), this.chr('{'), this.chr('}'), this.chr('#'), this.chr('&'), this.chr('*'), this.chr('!'), this.chr('|'), this.chr('>'), this.chr("'"), this.chr('"'), this.chr('%'), this.chr('@'), this.chr('`'));
      }

      c_flow_indicator() {
        debug1("c_flow_indicator");
        return this.any(this.chr(','), this.chr('['), this.chr(']'), this.chr('{'), this.chr('}'));
      }

      b_line_feed() {
        debug1("b_line_feed");
        return this.chr("\u{0A}");
      }

      b_carriage_return() {
        debug1("b_carriage_return");
        return this.chr("\u{0D}");
      }

      b_char() {
        debug1("b_char");
        return this.any(this.b_line_feed, this.b_carriage_return);
      }

      nb_char() {
        debug1("nb_char");
        return this.but(this.c_printable, this.b_char, this.c_byte_order_mark);
      }

      b_break() {
        debug1("b_break");
        return this.any(this.all(this.b_carriage_return, this.b_line_feed), this.b_carriage_return, this.b_line_feed);
      }

      b_as_line_feed() {
        debug1("b_as_line_feed");
        return this.b_break;
      }

      b_non_content() {
        debug1("b_non_content");
        return this.b_break;
      }

      s_space() {
        debug1("s_space");
        return this.chr("\u{20}");
      }

      s_tab() {
        debug1("s_tab");
        return this.chr("\u{09}");
      }

      s_white() {
        debug1("s_white");
        return this.any(this.s_space, this.s_tab);
      }

      ns_char() {
        debug1("ns_char");
        return this.but(this.nb_char, this.s_white);
      }

      ns_dec_digit() {
        debug1("ns_dec_digit");
        return this.rng("\u{30}", "\u{39}");
      }

      ns_hex_digit() {
        debug1("ns_hex_digit");
        return this.any(this.ns_dec_digit, this.rng("\u{41}", "\u{46}"), this.rng("\u{61}", "\u{66}"));
      }

      ns_ascii_letter() {
        debug1("ns_ascii_letter");
        return this.any(this.rng("\u{41}", "\u{5A}"), this.rng("\u{61}", "\u{7A}"));
      }

      ns_word_char() {
        debug1("ns_word_char");
        return this.any(this.ns_dec_digit, this.ns_ascii_letter, this.chr('-'));
      }

      ns_uri_char() {
        debug1("ns_uri_char");
        return this.any(this.all(this.chr('%'), this.ns_hex_digit, this.ns_hex_digit), this.ns_word_char, this.chr('#'), this.chr(';'), this.chr('/'), this.chr('?'), this.chr(':'), this.chr('@'), this.chr('&'), this.chr('='), this.chr('+'), this.chr('$'), this.chr(','), this.chr('_'), this.chr('.'), this.chr('!'), this.chr('~'), this.chr('*'), this.chr("'"), this.chr('('), this.chr(')'), this.chr('['), this.chr(']'));
      }

      ns_tag_char() {
        debug1("ns_tag_char");
        return this.but(this.ns_uri_char, this.chr('!'), this.c_flow_indicator);
      }

      c_escape() {
        debug1("c_escape");
        return this.chr("\\");
      }

      ns_esc_null() {
        debug1("ns_esc_null");
        return this.chr('0');
      }

      ns_esc_bell() {
        debug1("ns_esc_bell");
        return this.chr('a');
      }

      ns_esc_backspace() {
        debug1("ns_esc_backspace");
        return this.chr('b');
      }

      ns_esc_horizontal_tab() {
        debug1("ns_esc_horizontal_tab");
        return this.any(this.chr('t'), this.chr("\u{09}"));
      }

      ns_esc_line_feed() {
        debug1("ns_esc_line_feed");
        return this.chr('n');
      }

      ns_esc_vertical_tab() {
        debug1("ns_esc_vertical_tab");
        return this.chr('v');
      }

      ns_esc_form_feed() {
        debug1("ns_esc_form_feed");
        return this.chr('f');
      }

      ns_esc_carriage_return() {
        debug1("ns_esc_carriage_return");
        return this.chr('r');
      }

      ns_esc_escape() {
        debug1("ns_esc_escape");
        return this.chr('e');
      }

      ns_esc_space() {
        debug1("ns_esc_space");
        return this.chr("\u{20}");
      }

      ns_esc_double_quote() {
        debug1("ns_esc_double_quote");
        return this.chr('"');
      }

      ns_esc_slash() {
        debug1("ns_esc_slash");
        return this.chr('/');
      }

      ns_esc_backslash() {
        debug1("ns_esc_backslash");
        return this.chr("\\");
      }

      ns_esc_next_line() {
        debug1("ns_esc_next_line");
        return this.chr('N');
      }

      ns_esc_non_breaking_space() {
        debug1("ns_esc_non_breaking_space");
        return this.chr('_');
      }

      ns_esc_line_separator() {
        debug1("ns_esc_line_separator");
        return this.chr('L');
      }

      ns_esc_paragraph_separator() {
        debug1("ns_esc_paragraph_separator");
        return this.chr('P');
      }

      ns_esc_8_bit() {
        debug1("ns_esc_8_bit");
        return this.all(this.chr('x'), this.rep(2, 2, this.ns_hex_digit));
      }

      ns_esc_16_bit() {
        debug1("ns_esc_16_bit");
        return this.all(this.chr('u'), this.rep(4, 4, this.ns_hex_digit));
      }

      ns_esc_32_bit() {
        debug1("ns_esc_32_bit");
        return this.all(this.chr('U'), this.rep(8, 8, this.ns_hex_digit));
      }

      c_ns_esc_char() {
        debug1("c_ns_esc_char");
        return this.all(this.chr("\\"), this.any(this.ns_esc_null, this.ns_esc_bell, this.ns_esc_backspace, this.ns_esc_horizontal_tab, this.ns_esc_line_feed, this.ns_esc_vertical_tab, this.ns_esc_form_feed, this.ns_esc_carriage_return, this.ns_esc_escape, this.ns_esc_space, this.ns_esc_double_quote, this.ns_esc_slash, this.ns_esc_backslash, this.ns_esc_next_line, this.ns_esc_non_breaking_space, this.ns_esc_line_separator, this.ns_esc_paragraph_separator, this.ns_esc_8_bit, this.ns_esc_16_bit, this.ns_esc_32_bit));
      }

      s_indent(n) {
        debug1("s_indent", n);
        return this.rep(n, n, this.s_space);
      }

      s_indent_lt(n) {
        debug1("s_indent_lt", n);
        return this.may(this.all(this.rep(0, 0, this.s_space), this.lt(this.len(this.match), n)));
      }

      s_indent_le(n) {
        debug1("s_indent_le", n);
        return this.may(this.all(this.rep(0, 0, this.s_space), this.le(this.len(this.match), this.chr('n'))));
      }

      s_separate_in_line() {
        debug1("s_separate_in_line");
        return this.any(this.rep(1, 0, this.s_white), this.start_of_line);
      }

      s_line_prefix(n, c) {
        debug1("s_line_prefix", n, c);
        return this.case(c, {
          'block-in': [this.s_block_line_prefix, n],
          'block-out': [this.s_block_line_prefix, n],
          'flow-in': [this.s_flow_line_prefix, n],
          'flow-out': [this.s_flow_line_prefix, n]
        });
      }

      s_block_line_prefix(n) {
        debug1("s_block_line_prefix", n);
        return [this.s_indent, n];
      }

      s_flow_line_prefix(n) {
        debug1("s_flow_line_prefix", n);
        return this.all([this.s_indent, n], this.rep(0, 1, this.s_separate_in_line));
      }

      l_empty(n, c) {
        debug1("l_empty", n, c);
        return this.all(this.any([this.s_line_prefix, n, c], [this.s_indent_lt, n]), this.b_as_line_feed);
      }

      b_l_trimmed(n, c) {
        debug1("b_l_trimmed", n, c);
        return this.all(this.b_non_content, this.rep(1, 0, [this.l_empty, n, c]));
      }

      b_as_space() {
        debug1("b_as_space");
        return this.b_break;
      }

      b_l_folded(n, c) {
        debug1("b_l_folded", n, c);
        return this.any([this.b_l_trimmed, n, c], this.b_as_space);
      }

      s_flow_folded(n) {
        debug1("s_flow_folded", n);
        return this.all(this.rep(0, 1, this.s_separate_in_line), [this.b_l_folded, n, "flow-in"], [this.s_flow_line_prefix, n]);
      }

      c_nb_comment_text() {
        debug1("c_nb_comment_text");
        return this.all(this.chr('#'), this.rep(0, 0, this.nb_char));
      }

      b_comment() {
        debug1("b_comment");
        return this.any(this.b_non_content, this.end_of_stream);
      }

      s_b_comment() {
        debug1("s_b_comment");
        return this.all(this.rep(0, 1, this.all(this.s_separate_in_line, this.rep(0, 1, this.c_nb_comment_text))), this.b_comment);
      }

      l_comment() {
        debug1("l_comment");
        return this.all(this.s_separate_in_line, this.rep(0, 1, this.c_nb_comment_text), this.b_comment);
      }

      s_l_comments() {
        debug1("s_l_comments");
        return this.all(this.any(this.s_b_comment, this.start_of_line), this.rep(0, 0, this.l_comment));
      }

      s_separate(n, c) {
        debug1("s_separate", n, c);
        return this.case(c, {
          'block-in': [this.s_separate_lines, n],
          'block-key': this.s_separate_in_line,
          'block-out': [this.s_separate_lines, n],
          'flow-in': [this.s_separate_lines, n],
          'flow-key': this.s_separate_in_line,
          'flow-out': [this.s_separate_lines, n]
        });
      }

      s_separate_lines(n) {
        debug1("s_separate_lines", n);
        return this.any(this.all(this.s_l_comments, [this.s_flow_line_prefix, n]), this.s_separate_in_line);
      }

      l_directive() {
        debug1("l_directive");
        return this.all(this.chr('%'), this.any(this.ns_yaml_directive, this.ns_tag_directive, this.ns_reserved_directive), this.s_l_comments);
      }

      ns_reserved_directive() {
        debug1("ns_reserved_directive");
        return this.all(this.ns_directive_name, this.rep(0, 0, this.all(this.s_separate_in_line, this.ns_directive_parameter)));
      }

      ns_directive_name() {
        debug1("ns_directive_name");
        return this.rep(1, 0, this.ns_char);
      }

      ns_directive_parameter() {
        debug1("ns_directive_parameter");
        return this.rep(1, 0, this.ns_char);
      }

      ns_yaml_directive() {
        debug1("ns_yaml_directive");
        return this.all(this.chr('Y'), this.chr('A'), this.chr('M'), this.chr('L'), this.s_separate_in_line, this.ns_yaml_version);
      }

      ns_yaml_version() {
        debug1("ns_yaml_version");
        return this.all(this.rep(1, 0, this.ns_dec_digit), this.chr('.'), this.rep(1, 0, this.ns_dec_digit));
      }

      ns_tag_directive() {
        debug1("ns_tag_directive");
        return this.all(this.chr('T'), this.chr('A'), this.chr('G'), this.s_separate_in_line, this.c_tag_handle, this.s_separate_in_line, this.ns_tag_prefix);
      }

      c_tag_handle() {
        debug1("c_tag_handle");
        return this.any(this.c_named_tag_handle, this.c_secondary_tag_handle, this.c_primary_tag_handle);
      }

      c_primary_tag_handle() {
        debug1("c_primary_tag_handle");
        return this.chr('!');
      }

      c_secondary_tag_handle() {
        debug1("c_secondary_tag_handle");
        return this.all(this.chr('!'), this.chr('!'));
      }

      c_named_tag_handle() {
        debug1("c_named_tag_handle");
        return this.all(this.chr('!'), this.rep(1, 0, this.ns_word_char), this.chr('!'));
      }

      ns_tag_prefix() {
        debug1("ns_tag_prefix");
        return this.any(this.c_ns_local_tag_prefix, this.ns_global_tag_prefix);
      }

      c_ns_local_tag_prefix() {
        debug1("c_ns_local_tag_prefix");
        return this.all(this.chr('!'), this.rep(0, 0, this.ns_uri_char));
      }

      ns_global_tag_prefix() {
        debug1("ns_global_tag_prefix");
        return this.all(this.ns_tag_char, this.rep(0, 0, this.ns_uri_char));
      }

      c_ns_properties(n, c) {
        debug1("c_ns_properties", n, c);
        return this.any(this.all(this.c_ns_tag_property, this.rep(0, 1, this.all([this.s_separate, n, c], this.c_ns_anchor_property))), this.all(this.c_ns_anchor_property, this.rep(0, 1, this.all([this.s_separate, n, c], this.c_ns_tag_property))));
      }

      c_ns_tag_property() {
        debug1("c_ns_tag_property");
        return this.any(this.c_verbatim_tag, this.c_ns_shorthand_tag, this.c_non_specific_tag);
      }

      c_verbatim_tag() {
        debug1("c_verbatim_tag");
        return this.all(this.chr('!'), this.chr('<'), this.rep(1, 0, this.ns_uri_char), this.chr('>'));
      }

      c_ns_shorthand_tag() {
        debug1("c_ns_shorthand_tag");
        return this.all(this.c_tag_handle, this.rep(1, 0, this.ns_tag_char));
      }

      c_non_specific_tag() {
        debug1("c_non_specific_tag");
        return this.chr('!');
      }

      c_ns_anchor_property() {
        debug1("c_ns_anchor_property");
        return this.all(this.chr('&'), this.ns_anchor_name);
      }

      ns_anchor_char() {
        debug1("ns_anchor_char");
        return this.but(this.ns_char, this.c_flow_indicator);
      }

      ns_anchor_name() {
        debug1("ns_anchor_name");
        return this.rep(1, 0, this.ns_anchor_char);
      }

      c_ns_alias_node() {
        debug1("c_ns_alias_node");
        return this.all(this.chr('*'), this.ns_anchor_name);
      }

      e_scalar() {
        debug1("e_scalar");
        return this.empty;
      }

      e_node() {
        debug1("e_node");
        return this.e_scalar;
      }

      nb_double_char() {
        debug1("nb_double_char");
        return this.any(this.c_ns_esc_char, this.but(this.nb_json, this.chr("\\"), this.chr('"')));
      }

      ns_double_char() {
        debug1("ns_double_char");
        return this.but(this.nb_double_char, this.s_white);
      }

      c_double_quoted(n, c) {
        debug1("c_double_quoted", n, c);
        return this.all(this.chr('"'), [this.nb_double_text, n, c], this.chr('"'));
      }

      nb_double_text(n, c) {
        debug1("nb_double_text", n, c);
        return this.case(c, {
          'block-key': this.nb_double_one_line,
          'flow-in': [this.nb_double_multi_line, n],
          'flow-key': this.nb_double_one_line,
          'flow-out': [this.nb_double_multi_line, n]
        });
      }

      nb_double_one_line() {
        debug1("nb_double_one_line");
        return this.rep(0, 0, this.nb_double_char);
      }

      s_double_escaped(n) {
        debug1("s_double_escaped", n);
        return this.all(this.rep(0, 0, this.s_white), this.chr("\\"), this.b_non_content, this.rep(0, 0, [this.l_empty, n, "flow-in"]), [this.s_flow_line_prefix, n]);
      }

      s_double_break(n) {
        debug1("s_double_break", n);
        return this.any([this.s_double_escaped, n], [this.s_flow_folded, n]);
      }

      nb_ns_double_in_line() {
        debug1("nb_ns_double_in_line");
        return this.rep(0, 0, this.all(this.rep(0, 0, this.s_white), this.ns_double_char));
      }

      s_double_next_line(n) {
        debug1("s_double_next_line", n);
        return this.all([this.s_double_break, n], this.rep(0, 1, this.all(this.ns_double_char, this.nb_ns_double_in_line, this.any([this.s_double_next_line, n], this.rep(0, 0, this.s_white)))));
      }

      nb_double_multi_line(n) {
        debug1("nb_double_multi_line", n);
        return this.all(this.nb_ns_double_in_line, this.any([this.s_double_next_line, n], this.rep(0, 0, this.s_white)));
      }

      c_quoted_quote() {
        debug1("c_quoted_quote");
        return this.all(this.chr("'"), this.chr("'"));
      }

      nb_single_char() {
        debug1("nb_single_char");
        return this.any(this.c_quoted_quote, this.but(this.nb_json, this.chr("'")));
      }

      ns_single_char() {
        debug1("ns_single_char");
        return this.but(this.nb_single_char, this.s_white);
      }

      c_single_quoted(n, c) {
        debug1("c_single_quoted", n, c);
        return this.all(this.chr("'"), [this.nb_single_text, n, c], this.chr("'"));
      }

      nb_single_text(n, c) {
        debug1("nb_single_text", n, c);
        return this.case(c, {
          'block-key': this.nb_single_one_line,
          'flow-in': [this.nb_single_multi_line, n],
          'flow-key': this.nb_single_one_line,
          'flow-out': [this.nb_single_multi_line, n]
        });
      }

      nb_single_one_line() {
        debug1("nb_single_one_line");
        return this.rep(0, 0, this.nb_single_char);
      }

      nb_ns_single_in_line() {
        debug1("nb_ns_single_in_line");
        return this.rep(0, 0, this.all(this.rep(0, 0, this.s_white), this.ns_single_char));
      }

      s_single_next_line(n) {
        debug1("s_single_next_line", n);
        return this.all([this.s_flow_folded, n], this.rep(0, 1, this.all(this.ns_single_char, this.nb_ns_single_in_line, this.any([this.s_single_next_line, n], this.rep(0, 0, this.s_white)))));
      }

      nb_single_multi_line(n) {
        debug1("nb_single_multi_line", n);
        return this.all(this.nb_ns_single_in_line, this.any([this.s_single_next_line, n], this.rep(0, 0, this.s_white)));
      }

      ns_plain_first(c) {
        debug1("ns_plain_first", c);
        return this.any(this.but(this.ns_char, this.c_indicator), this.all(this.any(this.chr('?'), this.chr(':'), this.chr('-')), this.chk('=', [this.ns_plain_safe, c])));
      }

      ns_plain_safe(c) {
        debug1("ns_plain_safe", c);
        return this.case(c, {
          'block-key': this.ns_plain_safe_out,
          'flow-in': this.ns_plain_safe_in,
          'flow-key': this.ns_plain_safe_in,
          'flow-out': this.ns_plain_safe_out
        });
      }

      ns_plain_safe_out() {
        debug1("ns_plain_safe_out");
        return this.ns_char;
      }

      ns_plain_safe_in() {
        debug1("ns_plain_safe_in");
        return this.but(this.ns_char, this.c_flow_indicator);
      }

      ns_plain_char(c) {
        debug1("ns_plain_char", c);
        return this.any(this.but([this.ns_plain_safe, c], this.chr(':'), this.chr('#')), this.all(this.chk('<=', this.ns_char), this.chr('#')), this.all(this.chr(':'), this.chk('=', [this.ns_plain_safe, c])));
      }

      ns_plain(n, c) {
        debug1("ns_plain", n, c);
        return this.case(c, {
          'block-key': [this.ns_plain_one_line, c],
          'flow-in': [this.ns_plain_multi_line, n, c],
          'flow-key': [this.ns_plain_one_line, c],
          'flow-out': [this.ns_plain_multi_line, n, c]
        });
      }

      nb_ns_plain_in_line(c) {
        debug1("nb_ns_plain_in_line", c);
        return this.rep(0, 0, this.all(this.rep(0, 0, this.s_white), [this.ns_plain_char, c]));
      }

      ns_plain_one_line(c) {
        debug1("ns_plain_one_line", c);
        return this.all([this.ns_plain_first, c], [this.nb_ns_plain_in_line, c]);
      }

      s_ns_plain_next_line(n, c) {
        debug1("s_ns_plain_next_line", n, c);
        return this.all([this.s_flow_folded, n], [this.ns_plain_char, c], [this.nb_ns_plain_in_line, c]);
      }

      ns_plain_multi_line(n, c) {
        debug1("ns_plain_multi_line", n, c);
        return this.all([this.ns_plain_one_line, c], this.rep(0, 0, [this.s_ns_plain_next_line, n, c]));
      }

      in_flow(c) {
        debug1("in_flow", c);
        return this.flip(c, {
          'block-key': "flow-key",
          'flow-in': "flow-in",
          'flow-key': "flow-key",
          'flow-out': "flow-in"
        });
      }

      c_flow_sequence(n, c) {
        debug1("c_flow_sequence", n, c);
        return this.all(this.chr('['), this.rep(0, 1, [this.s_separate, n, c]), this.rep(0, 1, [this.ns_s_flow_seq_entries, n, [this.in_flow, c]]), this.chr(']'));
      }

      ns_s_flow_seq_entries(n, c) {
        debug1("ns_s_flow_seq_entries", n, c);
        return this.all([this.ns_flow_seq_entry, n, c], this.rep(0, 1, [this.s_separate, n, c]), this.rep(0, 1, this.all(this.chr(','), this.rep(0, 1, [this.s_separate, n, c]), this.rep(0, 1, [this.ns_s_flow_seq_entries, n, c]))));
      }

      ns_flow_seq_entry(n, c) {
        debug1("ns_flow_seq_entry", n, c);
        return this.any([this.ns_flow_pair, n, c], [this.ns_flow_node, n, c]);
      }

      c_flow_mapping(n, c) {
        debug1("c_flow_mapping", n, c);
        return this.all(this.chr('{'), this.rep(0, 1, [this.s_separate, n, c]), this.rep(0, 1, [this.ns_s_flow_map_entries, n, [this.in_flow, c]]), this.chr('}'));
      }

      ns_s_flow_map_entries(n, c) {
        debug1("ns_s_flow_map_entries", n, c);
        return this.all([this.ns_flow_map_entry, n, c], this.rep(0, 1, [this.s_separate, n, c]), this.rep(0, 1, this.all(this.chr(','), this.rep(0, 1, [this.s_separate, n, c]), this.rep(0, 1, [this.ns_s_flow_map_entries, n, c]))));
      }

      ns_flow_map_entry(n, c) {
        debug1("ns_flow_map_entry", n, c);
        return this.any(this.all(this.chr('?'), [this.s_separate, n, c], [this.ns_flow_map_explicit_entry, n, c]), [this.ns_flow_map_implicit_entry, n, c]);
      }

      ns_flow_map_explicit_entry(n, c) {
        debug1("ns_flow_map_explicit_entry", n, c);
        return this.any([this.ns_flow_map_implicit_entry, n, c], this.all(this.e_node, this.e_node));
      }

      ns_flow_map_implicit_entry(n, c) {
        debug1("ns_flow_map_implicit_entry", n, c);
        return this.any([this.ns_flow_map_yaml_key_entry, n, c], [this.c_ns_flow_map_empty_key_entry, n, c], [this.c_ns_flow_map_json_key_entry, n, c]);
      }

      ns_flow_map_yaml_key_entry(n, c) {
        debug1("ns_flow_map_yaml_key_entry", n, c);
        return this.all([this.ns_flow_yaml_node, n, c], this.any(this.all(this.rep(0, 1, [this.s_separate, n, c]), [this.c_ns_flow_map_separate_value, n, c]), this.e_node));
      }

      c_ns_flow_map_empty_key_entry(n, c) {
        debug1("c_ns_flow_map_empty_key_entry", n, c);
        return this.all(this.e_node, [this.c_ns_flow_map_separate_value, n, c]);
      }

      c_ns_flow_map_separate_value(n, c) {
        debug1("c_ns_flow_map_separate_value", n, c);
        return this.all(this.chr(':'), this.chk('!', [this.ns_plain_safe, c]), this.any(this.all([this.s_separate, n, c], [this.ns_flow_node, n, c]), this.e_node));
      }

      c_ns_flow_map_json_key_entry(n, c) {
        debug1("c_ns_flow_map_json_key_entry", n, c);
        return this.all([this.c_flow_json_node, n, c], this.any(this.all(this.rep(0, 1, [this.s_separate, n, c]), [this.c_ns_flow_map_adjacent_value, n, c]), this.e_node));
      }

      c_ns_flow_map_adjacent_value(n, c) {
        debug1("c_ns_flow_map_adjacent_value", n, c);
        return this.all(this.chr(':'), this.any(this.all(this.rep(0, 1, [this.s_separate, n, c]), [this.ns_flow_node, n, c]), this.e_node));
      }

      ns_flow_pair(n, c) {
        debug1("ns_flow_pair", n, c);
        return this.any(this.all(this.chr('?'), [this.s_separate, n, c], [this.ns_flow_map_explicit_entry, n, c]), [this.ns_flow_pair_entry, n, c]);
      }

      ns_flow_pair_entry(n, c) {
        debug1("ns_flow_pair_entry", n, c);
        return this.any([this.ns_flow_pair_yaml_key_entry, n, c], [this.c_ns_flow_map_empty_key_entry, n, c], [this.c_ns_flow_pair_json_key_entry, n, c]);
      }

      ns_flow_pair_yaml_key_entry(n, c) {
        debug1("ns_flow_pair_yaml_key_entry", n, c);
        return this.all([this.ns_s_implicit_yaml_key, "flow-key"], [this.c_ns_flow_map_separate_value, n, c]);
      }

      c_ns_flow_pair_json_key_entry(n, c) {
        debug1("c_ns_flow_pair_json_key_entry", n, c);
        return this.all([this.c_s_implicit_json_key, "flow-key"], [this.c_ns_flow_map_adjacent_value, n, c]);
      }

      ns_s_implicit_yaml_key(c) {
        debug1("ns_s_implicit_yaml_key", c);
        return this.all(this.max(1024), [this.ns_flow_yaml_node, null, c], this.rep(0, 1, this.s_separate_in_line));
      }

      c_s_implicit_json_key(c) {
        debug1("c_s_implicit_json_key", c);
        return this.all(this.max(1024), [this.c_flow_json_node, null, c], this.rep(0, 1, this.s_separate_in_line));
      }

      ns_flow_yaml_content(n, c) {
        debug1("ns_flow_yaml_content", n, c);
        return [this.ns_plain, n, c];
      }

      c_flow_json_content(n, c) {
        debug1("c_flow_json_content", n, c);
        return this.any([this.c_flow_sequence, n, c], [this.c_flow_mapping, n, c], [this.c_single_quoted, n, c], [this.c_double_quoted, n, c]);
      }

      ns_flow_content(n, c) {
        debug1("ns_flow_content", n, c);
        return this.any([this.ns_flow_yaml_content, n, c], [this.c_flow_json_content, n, c]);
      }

      ns_flow_yaml_node(n, c) {
        debug1("ns_flow_yaml_node", n, c);
        return this.any(this.c_ns_alias_node, [this.ns_flow_yaml_content, n, c], this.all([this.c_ns_properties, n, c], this.any(this.all([this.s_separate, n, c], [this.ns_flow_yaml_content, n, c]), this.e_scalar)));
      }

      c_flow_json_node(n, c) {
        debug1("c_flow_json_node", n, c);
        return this.all(this.rep(0, 1, this.all([this.c_ns_properties, n, c], [this.s_separate, n, c])), [this.c_flow_json_content, n, c]);
      }

      ns_flow_node(n, c) {
        debug1("ns_flow_node", n, c);
        return this.any(this.c_ns_alias_node, [this.ns_flow_content, n, c], this.all([this.c_ns_properties, n, c], this.any(this.all([this.s_separate, n, c], [this.ns_flow_content, n, c]), this.e_scalar)));
      }

      c_b_block_header(m, t) {
        debug1("c_b_block_header", m, t);
        return this.all(this.any(this.all([this.c_indentation_indicator, m], [this.c_chomping_indicator, t]), this.all([this.c_chomping_indicator, t], [this.c_indentation_indicator, m])), this.s_b_comment);
      }

      c_indentation_indicator(m) {
        debug1("c_indentation_indicator", m);
        return this.any(this.if(this.ns_dec_digit, this.set('m', this.ord(this.match))), this.if(this.empty, this.set('m', "auto-detect")));
      }

      c_chomping_indicator(t) {
        debug1("c_chomping_indicator", t);
        return this.any(this.if(this.chr('-'), this.set('t', "strip")), this.if(this.chr('+'), this.set('t', "keep")), this.if(this.empty, this.set('t', "clip")));
      }

      b_chomped_last(t) {
        debug1("b_chomped_last", t);
        return this.case(t, {
          'clip': this.any(this.b_as_line_feed, this.end_of_stream),
          'keep': this.any(this.b_as_line_feed, this.end_of_stream),
          'strip': this.any(this.b_non_content, this.end_of_stream)
        });
      }

      l_chomped_empty(n, t) {
        debug1("l_chomped_empty", n, t);
        return this.case(t, {
          'clip': [this.l_strip_empty, n],
          'keep': [this.l_keep_empty, n],
          'strip': [this.l_strip_empty, n]
        });
      }

      l_strip_empty(n) {
        debug1("l_strip_empty", n);
        return this.all(this.rep(0, 0, this.all([this.s_indent_le, n], this.b_non_content)), this.rep(0, 1, [this.l_trail_comments, n]));
      }

      l_keep_empty(n) {
        debug1("l_keep_empty", n);
        return this.all(this.rep(0, 0, [this.l_empty, n, "block-in"]), this.rep(0, 1, [this.l_trail_comments, n]));
      }

      l_trail_comments(n) {
        debug1("l_trail_comments", n);
        return this.all([this.s_indent_lt, n], this.c_nb_comment_text, this.b_comment, this.rep(0, 0, this.l_comment));
      }

      c_l_literal(n) {
        debug1("c_l_literal", n);
        return this.all(this.chr('|'), [this.c_b_block_header, this.m, this.t], [this.l_literal_content, this.add(n, this.m), this.t]);
      }

      l_nb_literal_text(n) {
        debug1("l_nb_literal_text", n);
        return this.all(this.rep(0, 0, [this.l_empty, n, "block-in"]), [this.s_indent, n], this.rep(1, 0, this.nb_char));
      }

      b_nb_literal_next(n) {
        debug1("b_nb_literal_next", n);
        return this.all(this.b_as_line_feed, [this.l_nb_literal_text, n]);
      }

      l_literal_content(n, t) {
        debug1("l_literal_content", n, t);
        return this.all(this.rep(0, 1, this.all([this.l_nb_literal_text, n], this.rep(0, 0, [this.b_nb_literal_next, n]), [this.b_chomped_last, t])), [this.l_chomped_empty, n, t]);
      }

      c_l_folded(n) {
        debug1("c_l_folded", n);
        return this.all(this.chr('>'), [this.c_b_block_header, this.m, this.t], [this.l_folded_content, this.add(n, this.m), this.t]);
      }

      s_nb_folded_text(n) {
        debug1("s_nb_folded_text", n);
        return this.all([this.s_indent, n], this.ns_char, this.rep(0, 0, this.nb_char));
      }

      l_nb_folded_lines(n) {
        debug1("l_nb_folded_lines", n);
        return this.all([this.s_nb_folded_text, n], this.rep(0, 0, this.all([this.b_l_folded, n, "block-in"], [this.s_nb_folded_text, n])));
      }

      s_nb_spaced_text(n) {
        debug1("s_nb_spaced_text", n);
        return this.all([this.s_indent, n], this.s_white, this.rep(0, 0, this.nb_char));
      }

      b_l_spaced(n) {
        debug1("b_l_spaced", n);
        return this.all(this.b_as_line_feed, this.rep(0, 0, [this.l_empty, n, "block-in"]));
      }

      l_nb_spaced_lines(n) {
        debug1("l_nb_spaced_lines", n);
        return this.all([this.s_nb_spaced_text, n], this.rep(0, 0, this.all([this.b_l_spaced, n], [this.s_nb_spaced_text, n])));
      }

      l_nb_same_lines(n) {
        debug1("l_nb_same_lines", n);
        return this.all(this.rep(0, 0, [this.l_empty, n, "block-in"]), this.any([this.l_nb_folded_lines, n], [this.l_nb_spaced_lines, n]));
      }

      l_nb_diff_lines(n) {
        debug1("l_nb_diff_lines", n);
        return this.all([this.l_nb_same_lines, n], this.rep(0, 0, this.all(this.b_as_line_feed, [this.l_nb_same_lines, n])));
      }

      l_folded_content(n, t) {
        debug1("l_folded_content", n, t);
        return this.all(this.rep(0, 1, this.all([this.l_nb_diff_lines, n], [this.b_chomped_last, t])), [this.l_chomped_empty, n, t]);
      }

      l_block_sequence(n) {
        debug1("l_block_sequence", n);
        return this.all(this.set('m', this.auto_detect_indent), this.rep(1, 0, this.all([this.s_indent, this.add(n, this.m)], [this.c_l_block_seq_entry, this.add(n, this.m)])));
      }

      c_l_block_seq_entry(n) {
        debug1("c_l_block_seq_entry", n);
        return this.all(this.chr('-'), this.chk('!', this.ns_char), [this.s_l_block_indented, n, "block-in"]);
      }

      s_l_block_indented(n, c) {
        debug1("s_l_block_indented", n, c);
        return this.any(this.all([this.s_indent, this.m], this.any([this.ns_l_compact_sequence, this.add(n, this.add(1, this.m))], [this.ns_l_compact_mapping, this.add(n, this.add(1, this.m))])), [this.s_l_block_node, n, c], this.all(this.e_node, this.s_l_comments));
      }

      ns_l_compact_sequence(n) {
        debug1("ns_l_compact_sequence", n);
        return this.all([this.c_l_block_seq_entry, n], this.rep(0, 0, this.all([this.s_indent, n], [this.c_l_block_seq_entry, n])));
      }

      l_block_mapping(n) {
        debug1("l_block_mapping", n);
        return this.all(this.set('m', this.auto_detect_indent), this.rep(1, 0, this.all([this.s_indent, this.add(n, this.m)], [this.ns_l_block_map_entry, this.add(n, this.m)])));
      }

      ns_l_block_map_entry(n) {
        debug1("ns_l_block_map_entry", n);
        return this.any([this.c_l_block_map_explicit_entry, n], [this.ns_l_block_map_implicit_entry, n]);
      }

      c_l_block_map_explicit_entry(n) {
        debug1("c_l_block_map_explicit_entry", n);
        return this.all([this.c_l_block_map_explicit_key, n], this.any([this.l_block_map_explicit_value, n], this.e_node));
      }

      c_l_block_map_explicit_key(n) {
        debug1("c_l_block_map_explicit_key", n);
        return this.all(this.chr('?'), [this.s_l_block_indented, n, "block-out"]);
      }

      l_block_map_explicit_value(n) {
        debug1("l_block_map_explicit_value", n);
        return this.all([this.s_indent, n], this.chr(':'), [this.s_l_block_indented, n, "block-out"]);
      }

      ns_l_block_map_implicit_entry(n) {
        debug1("ns_l_block_map_implicit_entry", n);
        return this.all(this.any(this.ns_s_block_map_implicit_key, this.e_node), [this.c_l_block_map_implicit_value, n]);
      }

      ns_s_block_map_implicit_key() {
        debug1("ns_s_block_map_implicit_key");
        return this.any([this.c_s_implicit_json_key, "block-key"], [this.ns_s_implicit_yaml_key, "block-key"]);
      }

      c_l_block_map_implicit_value(n) {
        debug1("c_l_block_map_implicit_value", n);
        return this.all(this.chr(':'), this.any([this.s_l_block_node, n, "block-out"], this.all(this.e_node, this.s_l_comments)));
      }

      ns_l_compact_mapping(n) {
        debug1("ns_l_compact_mapping", n);
        return this.all([this.ns_l_block_map_entry, n], this.rep(0, 0, this.all([this.s_indent, n], [this.ns_l_block_map_entry, n])));
      }

      s_l_block_node(n, c) {
        debug1("s_l_block_node", n, c);
        return this.any([this.s_l_block_in_block, n, c], [this.s_l_flow_in_block, n]);
      }

      s_l_flow_in_block(n) {
        debug1("s_l_flow_in_block", n);
        return this.all([this.s_separate, this.add(n, 1), "flow-out"], [this.ns_flow_node, this.add(n, 1), "flow-out"], this.s_l_comments);
      }

      s_l_block_in_block(n, c) {
        debug1("s_l_block_in_block", n, c);
        return this.any([this.s_l_block_scalar, n, c], [this.s_l_block_collection, n, c]);
      }

      s_l_block_scalar(n, c) {
        debug1("s_l_block_scalar", n, c);
        return this.all([this.s_separate, this.add(n, 1), c], this.rep(0, 1, this.all([this.c_ns_properties, this.add(n, 1), c], [this.s_separate, this.add(n, 1), c])), this.any([this.c_l_literal, n], [this.c_l_folded, n]));
      }

      s_l_block_collection(n, c) {
        debug1("s_l_block_collection", n, c);
        return this.all(this.rep(0, 1, this.all([this.s_separate, this.add(n, 1), c], [this.c_ns_properties, this.add(n, 1), c])), this.s_l_comments, this.any([this.l_block_sequence, [this.seq_spaces, n, c]], [this.l_block_mapping, n]));
      }

      seq_spaces(n, c) {
        debug1("seq_spaces", n, c);
        return this.flip(c, {
          'block-in': n,
          'block-out': this.sub(n, 1)
        });
      }

      l_document_prefix() {
        debug1("l_document_prefix");
        return this.all(this.rep(0, 1, this.c_byte_order_mark), this.rep(0, 0, this.l_comment));
      }

      c_directives_end() {
        debug1("c_directives_end");
        return this.all(this.chr('-'), this.chr('-'), this.chr('-'));
      }

      c_document_end() {
        debug1("c_document_end");
        return this.all(this.chr('.'), this.chr('.'), this.chr('.'));
      }

      l_document_suffix() {
        debug1("l_document_suffix");
        return this.all(this.c_document_end, this.s_l_comments);
      }

      c_forbidden() {
        debug1("c_forbidden");
        return this.all(this.start_of_line, this.any(this.c_directives_end, this.c_document_end), this.any(this.b_char, this.s_white, this.end_of_stream));
      }

      l_bare_document() {
        debug1("l_bare_document");
        return this.all(this.exclude(this.c_forbidden), [this.s_l_block_node, -1, "block-in"]);
      }

      l_explicit_document() {
        debug1("l_explicit_document");
        return this.all(this.c_directives_end, this.any(this.l_bare_document, this.all(this.e_node, this.s_l_comments)));
      }

      l_directive_document() {
        debug1("l_directive_document");
        return this.all(this.rep(1, 0, this.l_directive), this.l_explicit_document);
      }

      l_any_document() {
        debug1("l_any_document");
        return this.any(this.l_directive_document, this.l_explicit_document, this.l_bare_document);
      }

      l_yaml_stream() {
        debug1("l_yaml_stream");
        return this.all(this.rep(0, 0, this.l_document_prefix), this.rep(0, 1, this.l_any_document), this.rep(0, 0, this.any(this.all(this.rep(1, 0, this.l_document_suffix), this.rep(0, 0, this.l_document_prefix), this.rep(0, 1, this.l_any_document)), this.all(this.rep(0, 0, this.l_document_prefix), this.rep(0, 1, this.l_explicit_document)))));
      }

    };

    // [001]
    // c-printable ::=
    //   x:9 | x:A | x:D | [x:20-x:7E]
    //   | x:85 | [x:A0-x:D7FF] | [x:E000-x:FFFD]
    //   | [x:10000-x:10FFFF]
    Grammar.prototype.c_printable.num = 1;

    // [002]
    // nb-json ::=
    //   x:9 | [x:20-x:10FFFF]
    Grammar.prototype.nb_json.num = 2;

    // [003]
    // c-byte-order-mark ::=
    //   x:FEFF
    Grammar.prototype.c_byte_order_mark.num = 3;

    // [004]
    // c-sequence-entry ::=
    //   '-'
    Grammar.prototype.c_sequence_entry.num = 4;

    // [005]
    // c-mapping-key ::=
    //   '?'
    Grammar.prototype.c_mapping_key.num = 5;

    // [006]
    // c-mapping-value ::=
    //   ':'
    Grammar.prototype.c_mapping_value.num = 6;

    // [007]
    // c-collect-entry ::=
    //   ','
    Grammar.prototype.c_collect_entry.num = 7;

    // [008]
    // c-sequence-start ::=
    //   '['
    Grammar.prototype.c_sequence_start.num = 8;

    // [009]
    // c-sequence-end ::=
    //   ']'
    Grammar.prototype.c_sequence_end.num = 9;

    // [010]
    // c-mapping-start ::=
    //   '{'
    Grammar.prototype.c_mapping_start.num = 10;

    // [011]
    // c-mapping-end ::=
    //   '}'
    Grammar.prototype.c_mapping_end.num = 11;

    // [012]
    // c-comment ::=
    //   '#'
    Grammar.prototype.c_comment.num = 12;

    // [013]
    // c-anchor ::=
    //   '&'
    Grammar.prototype.c_anchor.num = 13;

    // [014]
    // c-alias ::=
    //   '*'
    Grammar.prototype.c_alias.num = 14;

    // [015]
    // c-tag ::=
    //   '!'
    Grammar.prototype.c_tag.num = 15;

    // [016]
    // c-literal ::=
    //   '|'
    Grammar.prototype.c_literal.num = 16;

    // [017]
    // c-folded ::=
    //   '>'
    Grammar.prototype.c_folded.num = 17;

    // [018]
    // c-single-quote ::=
    //   '''
    Grammar.prototype.c_single_quote.num = 18;

    // [019]
    // c-double-quote ::=
    //   '"'
    Grammar.prototype.c_double_quote.num = 19;

    // [020]
    // c-directive ::=
    //   '%'
    Grammar.prototype.c_directive.num = 20;

    // [021]
    // c-reserved ::=
    //   '@' | '`'
    Grammar.prototype.c_reserved.num = 21;

    // [022]
    // c-indicator ::=
    //   '-' | '?' | ':' | ',' | '[' | ']' | '{' | '}'
    //   | '#' | '&' | '*' | '!' | '|' | '>' | ''' | '"'
    //   | '%' | '@' | '`'
    Grammar.prototype.c_indicator.num = 22;

    // [023]
    // c-flow-indicator ::=
    //   ',' | '[' | ']' | '{' | '}'
    Grammar.prototype.c_flow_indicator.num = 23;

    // [024]
    // b-line-feed ::=
    //   x:A
    Grammar.prototype.b_line_feed.num = 24;

    // [025]
    // b-carriage-return ::=
    //   x:D
    Grammar.prototype.b_carriage_return.num = 25;

    // [026]
    // b-char ::=
    //   b-line-feed | b-carriage-return
    Grammar.prototype.b_char.num = 26;

    // [027]
    // nb-char ::=
    //   c-printable - b-char - c-byte-order-mark
    Grammar.prototype.nb_char.num = 27;

    // [028]
    // b-break ::=
    //   ( b-carriage-return b-line-feed )
    //   | b-carriage-return
    //   | b-line-feed
    Grammar.prototype.b_break.num = 28;

    // [029]
    // b-as-line-feed ::=
    //   b-break
    Grammar.prototype.b_as_line_feed.num = 29;

    // [030]
    // b-non-content ::=
    //   b-break
    Grammar.prototype.b_non_content.num = 30;

    // [031]
    // s-space ::=
    //   x:20
    Grammar.prototype.s_space.num = 31;

    // [032]
    // s-tab ::=
    //   x:9
    Grammar.prototype.s_tab.num = 32;

    // [033]
    // s-white ::=
    //   s-space | s-tab
    Grammar.prototype.s_white.num = 33;

    // [034]
    // ns-char ::=
    //   nb-char - s-white
    Grammar.prototype.ns_char.num = 34;

    // [035]
    // ns-dec-digit ::=
    //   [x:30-x:39]
    Grammar.prototype.ns_dec_digit.num = 35;

    // [036]
    // ns-hex-digit ::=
    //   ns-dec-digit
    //   | [x:41-x:46] | [x:61-x:66]
    Grammar.prototype.ns_hex_digit.num = 36;

    // [037]
    // ns-ascii-letter ::=
    //   [x:41-x:5A] | [x:61-x:7A]
    Grammar.prototype.ns_ascii_letter.num = 37;

    // [038]
    // ns-word-char ::=
    //   ns-dec-digit | ns-ascii-letter | '-'
    Grammar.prototype.ns_word_char.num = 38;

    // [039]
    // ns-uri-char ::=
    //   '%' ns-hex-digit ns-hex-digit | ns-word-char | '#'
    //   | ';' | '/' | '?' | ':' | '@' | '&' | '=' | '+' | '$' | ','
    //   | '_' | '.' | '!' | '~' | '*' | ''' | '(' | ')' | '[' | ']'
    Grammar.prototype.ns_uri_char.num = 39;

    // [040]
    // ns-tag-char ::=
    //   ns-uri-char - '!' - c-flow-indicator
    Grammar.prototype.ns_tag_char.num = 40;

    // [041]
    // c-escape ::=
    //   '\'
    Grammar.prototype.c_escape.num = 41;

    // [042]
    // ns-esc-null ::=
    //   '0'
    Grammar.prototype.ns_esc_null.num = 42;

    // [043]
    // ns-esc-bell ::=
    //   'a'
    Grammar.prototype.ns_esc_bell.num = 43;

    // [044]
    // ns-esc-backspace ::=
    //   'b'
    Grammar.prototype.ns_esc_backspace.num = 44;

    // [045]
    // ns-esc-horizontal-tab ::=
    //   't' | x:9
    Grammar.prototype.ns_esc_horizontal_tab.num = 45;

    // [046]
    // ns-esc-line-feed ::=
    //   'n'
    Grammar.prototype.ns_esc_line_feed.num = 46;

    // [047]
    // ns-esc-vertical-tab ::=
    //   'v'
    Grammar.prototype.ns_esc_vertical_tab.num = 47;

    // [048]
    // ns-esc-form-feed ::=
    //   'f'
    Grammar.prototype.ns_esc_form_feed.num = 48;

    // [049]
    // ns-esc-carriage-return ::=
    //   'r'
    Grammar.prototype.ns_esc_carriage_return.num = 49;

    // [050]
    // ns-esc-escape ::=
    //   'e'
    Grammar.prototype.ns_esc_escape.num = 50;

    // [051]
    // ns-esc-space ::=
    //   x:20
    Grammar.prototype.ns_esc_space.num = 51;

    // [052]
    // ns-esc-double-quote ::=
    //   '"'
    Grammar.prototype.ns_esc_double_quote.num = 52;

    // [053]
    // ns-esc-slash ::=
    //   '/'
    Grammar.prototype.ns_esc_slash.num = 53;

    // [054]
    // ns-esc-backslash ::=
    //   '\'
    Grammar.prototype.ns_esc_backslash.num = 54;

    // [055]
    // ns-esc-next-line ::=
    //   'N'
    Grammar.prototype.ns_esc_next_line.num = 55;

    // [056]
    // ns-esc-non-breaking-space ::=
    //   '_'
    Grammar.prototype.ns_esc_non_breaking_space.num = 56;

    // [057]
    // ns-esc-line-separator ::=
    //   'L'
    Grammar.prototype.ns_esc_line_separator.num = 57;

    // [058]
    // ns-esc-paragraph-separator ::=
    //   'P'
    Grammar.prototype.ns_esc_paragraph_separator.num = 58;

    // [059]
    // ns-esc-8-bit ::=
    //   'x'
    //   ( ns-hex-digit{2} )
    Grammar.prototype.ns_esc_8_bit.num = 59;

    // [060]
    // ns-esc-16-bit ::=
    //   'u'
    //   ( ns-hex-digit{4} )
    Grammar.prototype.ns_esc_16_bit.num = 60;

    // [061]
    // ns-esc-32-bit ::=
    //   'U'
    //   ( ns-hex-digit{8} )
    Grammar.prototype.ns_esc_32_bit.num = 61;

    // [062]
    // c-ns-esc-char ::=
    //   '\'
    //   ( ns-esc-null | ns-esc-bell | ns-esc-backspace
    //   | ns-esc-horizontal-tab | ns-esc-line-feed
    //   | ns-esc-vertical-tab | ns-esc-form-feed
    //   | ns-esc-carriage-return | ns-esc-escape | ns-esc-space
    //   | ns-esc-double-quote | ns-esc-slash | ns-esc-backslash
    //   | ns-esc-next-line | ns-esc-non-breaking-space
    //   | ns-esc-line-separator | ns-esc-paragraph-separator
    //   | ns-esc-8-bit | ns-esc-16-bit | ns-esc-32-bit )
    Grammar.prototype.c_ns_esc_char.num = 62;

    // [063]
    // s-indent(n) ::=
    //   s-space{n}
    Grammar.prototype.s_indent.num = 63;

    // [064]
    // s-indent(<n) ::=
    //   s-space{m} <where_m_<_n>
    Grammar.prototype.s_indent_lt.num = 64;

    // [065]
    // s-indent(<=n) ::=
    //   s-space{m} <where_m_<=_n>
    Grammar.prototype.s_indent_le.num = 65;

    // [066]
    // s-separate-in-line ::=
    //   s-white+ | <start_of_line>
    Grammar.prototype.s_separate_in_line.num = 66;

    // [067]
    // s-line-prefix(n,c) ::=
    //   ( c = block-out => s-block-line-prefix(n) )
    //   ( c = block-in => s-block-line-prefix(n) )
    //   ( c = flow-out => s-flow-line-prefix(n) )
    //   ( c = flow-in => s-flow-line-prefix(n) )
    Grammar.prototype.s_line_prefix.num = 67;

    // [068]
    // s-block-line-prefix(n) ::=
    //   s-indent(n)
    Grammar.prototype.s_block_line_prefix.num = 68;

    // [069]
    // s-flow-line-prefix(n) ::=
    //   s-indent(n)
    //   s-separate-in-line?
    Grammar.prototype.s_flow_line_prefix.num = 69;

    // [070]
    // l-empty(n,c) ::=
    //   ( s-line-prefix(n,c) | s-indent(<n) )
    //   b-as-line-feed
    Grammar.prototype.l_empty.num = 70;

    // [071]
    // b-l-trimmed(n,c) ::=
    //   b-non-content l-empty(n,c)+
    Grammar.prototype.b_l_trimmed.num = 71;

    // [072]
    // b-as-space ::=
    //   b-break
    Grammar.prototype.b_as_space.num = 72;

    // [073]
    // b-l-folded(n,c) ::=
    //   b-l-trimmed(n,c) | b-as-space
    Grammar.prototype.b_l_folded.num = 73;

    // [074]
    // s-flow-folded(n) ::=
    //   s-separate-in-line?
    //   b-l-folded(n,flow-in)
    //   s-flow-line-prefix(n)
    Grammar.prototype.s_flow_folded.num = 74;

    // [075]
    // c-nb-comment-text ::=
    //   '#' nb-char*
    Grammar.prototype.c_nb_comment_text.num = 75;

    // [076]
    // b-comment ::=
    //   b-non-content | <end_of_file>
    Grammar.prototype.b_comment.num = 76;

    // [077]
    // s-b-comment ::=
    //   ( s-separate-in-line
    //   c-nb-comment-text? )?
    //   b-comment
    Grammar.prototype.s_b_comment.num = 77;

    // [078]
    // l-comment ::=
    //   s-separate-in-line c-nb-comment-text?
    //   b-comment
    Grammar.prototype.l_comment.num = 78;

    // [079]
    // s-l-comments ::=
    //   ( s-b-comment | <start_of_line> )
    //   l-comment*
    Grammar.prototype.s_l_comments.num = 79;

    // [080]
    // s-separate(n,c) ::=
    //   ( c = block-out => s-separate-lines(n) )
    //   ( c = block-in => s-separate-lines(n) )
    //   ( c = flow-out => s-separate-lines(n) )
    //   ( c = flow-in => s-separate-lines(n) )
    //   ( c = block-key => s-separate-in-line )
    //   ( c = flow-key => s-separate-in-line )
    Grammar.prototype.s_separate.num = 80;

    // [081]
    // s-separate-lines(n) ::=
    //   ( s-l-comments
    //   s-flow-line-prefix(n) )
    //   | s-separate-in-line
    Grammar.prototype.s_separate_lines.num = 81;

    // [082]
    // l-directive ::=
    //   '%'
    //   ( ns-yaml-directive
    //   | ns-tag-directive
    //   | ns-reserved-directive )
    //   s-l-comments
    Grammar.prototype.l_directive.num = 82;

    // [083]
    // ns-reserved-directive ::=
    //   ns-directive-name
    //   ( s-separate-in-line ns-directive-parameter )*
    Grammar.prototype.ns_reserved_directive.num = 83;

    // [084]
    // ns-directive-name ::=
    //   ns-char+
    Grammar.prototype.ns_directive_name.num = 84;

    // [085]
    // ns-directive-parameter ::=
    //   ns-char+
    Grammar.prototype.ns_directive_parameter.num = 85;

    // [086]
    // ns-yaml-directive ::=
    //   'Y' 'A' 'M' 'L'
    //   s-separate-in-line ns-yaml-version
    Grammar.prototype.ns_yaml_directive.num = 86;

    // [087]
    // ns-yaml-version ::=
    //   ns-dec-digit+ '.' ns-dec-digit+
    Grammar.prototype.ns_yaml_version.num = 87;

    // [088]
    // ns-tag-directive ::=
    //   'T' 'A' 'G'
    //   s-separate-in-line c-tag-handle
    //   s-separate-in-line ns-tag-prefix
    Grammar.prototype.ns_tag_directive.num = 88;

    // [089]
    // c-tag-handle ::=
    //   c-named-tag-handle
    //   | c-secondary-tag-handle
    //   | c-primary-tag-handle
    Grammar.prototype.c_tag_handle.num = 89;

    // [090]
    // c-primary-tag-handle ::=
    //   '!'
    Grammar.prototype.c_primary_tag_handle.num = 90;

    // [091]
    // c-secondary-tag-handle ::=
    //   '!' '!'
    Grammar.prototype.c_secondary_tag_handle.num = 91;

    // [092]
    // c-named-tag-handle ::=
    //   '!' ns-word-char+ '!'
    Grammar.prototype.c_named_tag_handle.num = 92;

    // [093]
    // ns-tag-prefix ::=
    //   c-ns-local-tag-prefix | ns-global-tag-prefix
    Grammar.prototype.ns_tag_prefix.num = 93;

    // [094]
    // c-ns-local-tag-prefix ::=
    //   '!' ns-uri-char*
    Grammar.prototype.c_ns_local_tag_prefix.num = 94;

    // [095]
    // ns-global-tag-prefix ::=
    //   ns-tag-char ns-uri-char*
    Grammar.prototype.ns_global_tag_prefix.num = 95;

    // [096]
    // c-ns-properties(n,c) ::=
    //   ( c-ns-tag-property
    //   ( s-separate(n,c) c-ns-anchor-property )? )
    //   | ( c-ns-anchor-property
    //   ( s-separate(n,c) c-ns-tag-property )? )
    Grammar.prototype.c_ns_properties.num = 96;

    // [097]
    // c-ns-tag-property ::=
    //   c-verbatim-tag
    //   | c-ns-shorthand-tag
    //   | c-non-specific-tag
    Grammar.prototype.c_ns_tag_property.num = 97;

    // [098]
    // c-verbatim-tag ::=
    //   '!' '<' ns-uri-char+ '>'
    Grammar.prototype.c_verbatim_tag.num = 98;

    // [099]
    // c-ns-shorthand-tag ::=
    //   c-tag-handle ns-tag-char+
    Grammar.prototype.c_ns_shorthand_tag.num = 99;

    // [100]
    // c-non-specific-tag ::=
    //   '!'
    Grammar.prototype.c_non_specific_tag.num = 100;

    // [101]
    // c-ns-anchor-property ::=
    //   '&' ns-anchor-name
    Grammar.prototype.c_ns_anchor_property.num = 101;

    // [102]
    // ns-anchor-char ::=
    //   ns-char - c-flow-indicator
    Grammar.prototype.ns_anchor_char.num = 102;

    // [103]
    // ns-anchor-name ::=
    //   ns-anchor-char+
    Grammar.prototype.ns_anchor_name.num = 103;

    // [104]
    // c-ns-alias-node ::=
    //   '*' ns-anchor-name
    Grammar.prototype.c_ns_alias_node.num = 104;

    // [105]
    // e-scalar ::=
    //   <empty>
    Grammar.prototype.e_scalar.num = 105;

    // [106]
    // e-node ::=
    //   e-scalar
    Grammar.prototype.e_node.num = 106;

    // [107]
    // nb-double-char ::=
    //   c-ns-esc-char | ( nb-json - '\' - '"' )
    Grammar.prototype.nb_double_char.num = 107;

    // [108]
    // ns-double-char ::=
    //   nb-double-char - s-white
    Grammar.prototype.ns_double_char.num = 108;

    // [109]
    // c-double-quoted(n,c) ::=
    //   '"' nb-double-text(n,c)
    //   '"'
    Grammar.prototype.c_double_quoted.num = 109;

    // [110]
    // nb-double-text(n,c) ::=
    //   ( c = flow-out => nb-double-multi-line(n) )
    //   ( c = flow-in => nb-double-multi-line(n) )
    //   ( c = block-key => nb-double-one-line )
    //   ( c = flow-key => nb-double-one-line )
    Grammar.prototype.nb_double_text.num = 110;

    // [111]
    // nb-double-one-line ::=
    //   nb-double-char*
    Grammar.prototype.nb_double_one_line.num = 111;

    // [112]
    // s-double-escaped(n) ::=
    //   s-white* '\'
    //   b-non-content
    //   l-empty(n,flow-in)* s-flow-line-prefix(n)
    Grammar.prototype.s_double_escaped.num = 112;

    // [113]
    // s-double-break(n) ::=
    //   s-double-escaped(n) | s-flow-folded(n)
    Grammar.prototype.s_double_break.num = 113;

    // [114]
    // nb-ns-double-in-line ::=
    //   ( s-white* ns-double-char )*
    Grammar.prototype.nb_ns_double_in_line.num = 114;

    // [115]
    // s-double-next-line(n) ::=
    //   s-double-break(n)
    //   ( ns-double-char nb-ns-double-in-line
    //   ( s-double-next-line(n) | s-white* ) )?
    Grammar.prototype.s_double_next_line.num = 115;

    // [116]
    // nb-double-multi-line(n) ::=
    //   nb-ns-double-in-line
    //   ( s-double-next-line(n) | s-white* )
    Grammar.prototype.nb_double_multi_line.num = 116;

    // [117]
    // c-quoted-quote ::=
    //   ''' '''
    Grammar.prototype.c_quoted_quote.num = 117;

    // [118]
    // nb-single-char ::=
    //   c-quoted-quote | ( nb-json - ''' )
    Grammar.prototype.nb_single_char.num = 118;

    // [119]
    // ns-single-char ::=
    //   nb-single-char - s-white
    Grammar.prototype.ns_single_char.num = 119;

    // [120]
    // c-single-quoted(n,c) ::=
    //   ''' nb-single-text(n,c)
    //   '''
    Grammar.prototype.c_single_quoted.num = 120;

    // [121]
    // nb-single-text(n,c) ::=
    //   ( c = flow-out => nb-single-multi-line(n) )
    //   ( c = flow-in => nb-single-multi-line(n) )
    //   ( c = block-key => nb-single-one-line )
    //   ( c = flow-key => nb-single-one-line )
    Grammar.prototype.nb_single_text.num = 121;

    // [122]
    // nb-single-one-line ::=
    //   nb-single-char*
    Grammar.prototype.nb_single_one_line.num = 122;

    // [123]
    // nb-ns-single-in-line ::=
    //   ( s-white* ns-single-char )*
    Grammar.prototype.nb_ns_single_in_line.num = 123;

    // [124]
    // s-single-next-line(n) ::=
    //   s-flow-folded(n)
    //   ( ns-single-char nb-ns-single-in-line
    //   ( s-single-next-line(n) | s-white* ) )?
    Grammar.prototype.s_single_next_line.num = 124;

    // [125]
    // nb-single-multi-line(n) ::=
    //   nb-ns-single-in-line
    //   ( s-single-next-line(n) | s-white* )
    Grammar.prototype.nb_single_multi_line.num = 125;

    // [126]
    // ns-plain-first(c) ::=
    //   ( ns-char - c-indicator )
    //   | ( ( '?' | ':' | '-' )
    //   <followed_by_an_ns-plain-safe(c)> )
    Grammar.prototype.ns_plain_first.num = 126;

    // [127]
    // ns-plain-safe(c) ::=
    //   ( c = flow-out => ns-plain-safe-out )
    //   ( c = flow-in => ns-plain-safe-in )
    //   ( c = block-key => ns-plain-safe-out )
    //   ( c = flow-key => ns-plain-safe-in )
    Grammar.prototype.ns_plain_safe.num = 127;

    // [128]
    // ns-plain-safe-out ::=
    //   ns-char
    Grammar.prototype.ns_plain_safe_out.num = 128;

    // [129]
    // ns-plain-safe-in ::=
    //   ns-char - c-flow-indicator
    Grammar.prototype.ns_plain_safe_in.num = 129;

    // [130]
    // ns-plain-char(c) ::=
    //   ( ns-plain-safe(c) - ':' - '#' )
    //   | ( <an_ns-char_preceding> '#' )
    //   | ( ':' <followed_by_an_ns-plain-safe(c)> )
    Grammar.prototype.ns_plain_char.num = 130;

    // [131]
    // ns-plain(n,c) ::=
    //   ( c = flow-out => ns-plain-multi-line(n,c) )
    //   ( c = flow-in => ns-plain-multi-line(n,c) )
    //   ( c = block-key => ns-plain-one-line(c) )
    //   ( c = flow-key => ns-plain-one-line(c) )
    Grammar.prototype.ns_plain.num = 131;

    // [132]
    // nb-ns-plain-in-line(c) ::=
    //   ( s-white*
    //   ns-plain-char(c) )*
    Grammar.prototype.nb_ns_plain_in_line.num = 132;

    // [133]
    // ns-plain-one-line(c) ::=
    //   ns-plain-first(c)
    //   nb-ns-plain-in-line(c)
    Grammar.prototype.ns_plain_one_line.num = 133;

    // [134]
    // s-ns-plain-next-line(n,c) ::=
    //   s-flow-folded(n)
    //   ns-plain-char(c) nb-ns-plain-in-line(c)
    Grammar.prototype.s_ns_plain_next_line.num = 134;

    // [135]
    // ns-plain-multi-line(n,c) ::=
    //   ns-plain-one-line(c)
    //   s-ns-plain-next-line(n,c)*
    Grammar.prototype.ns_plain_multi_line.num = 135;

    // [136]
    // in-flow(c) ::=
    //   ( c = flow-out => flow-in )
    //   ( c = flow-in => flow-in )
    //   ( c = block-key => flow-key )
    //   ( c = flow-key => flow-key )
    Grammar.prototype.in_flow.num = 136;

    // [137]
    // c-flow-sequence(n,c) ::=
    //   '[' s-separate(n,c)?
    //   ns-s-flow-seq-entries(n,in-flow(c))? ']'
    Grammar.prototype.c_flow_sequence.num = 137;

    // [138]
    // ns-s-flow-seq-entries(n,c) ::=
    //   ns-flow-seq-entry(n,c)
    //   s-separate(n,c)?
    //   ( ',' s-separate(n,c)?
    //   ns-s-flow-seq-entries(n,c)? )?
    Grammar.prototype.ns_s_flow_seq_entries.num = 138;

    // [139]
    // ns-flow-seq-entry(n,c) ::=
    //   ns-flow-pair(n,c) | ns-flow-node(n,c)
    Grammar.prototype.ns_flow_seq_entry.num = 139;

    // [140]
    // c-flow-mapping(n,c) ::=
    //   '{' s-separate(n,c)?
    //   ns-s-flow-map-entries(n,in-flow(c))? '}'
    Grammar.prototype.c_flow_mapping.num = 140;

    // [141]
    // ns-s-flow-map-entries(n,c) ::=
    //   ns-flow-map-entry(n,c)
    //   s-separate(n,c)?
    //   ( ',' s-separate(n,c)?
    //   ns-s-flow-map-entries(n,c)? )?
    Grammar.prototype.ns_s_flow_map_entries.num = 141;

    // [142]
    // ns-flow-map-entry(n,c) ::=
    //   ( '?' s-separate(n,c)
    //   ns-flow-map-explicit-entry(n,c) )
    //   | ns-flow-map-implicit-entry(n,c)
    Grammar.prototype.ns_flow_map_entry.num = 142;

    // [143]
    // ns-flow-map-explicit-entry(n,c) ::=
    //   ns-flow-map-implicit-entry(n,c)
    //   | ( e-node
    //   e-node )
    Grammar.prototype.ns_flow_map_explicit_entry.num = 143;

    // [144]
    // ns-flow-map-implicit-entry(n,c) ::=
    //   ns-flow-map-yaml-key-entry(n,c)
    //   | c-ns-flow-map-empty-key-entry(n,c)
    //   | c-ns-flow-map-json-key-entry(n,c)
    Grammar.prototype.ns_flow_map_implicit_entry.num = 144;

    // [145]
    // ns-flow-map-yaml-key-entry(n,c) ::=
    //   ns-flow-yaml-node(n,c)
    //   ( ( s-separate(n,c)?
    //   c-ns-flow-map-separate-value(n,c) )
    //   | e-node )
    Grammar.prototype.ns_flow_map_yaml_key_entry.num = 145;

    // [146]
    // c-ns-flow-map-empty-key-entry(n,c) ::=
    //   e-node
    //   c-ns-flow-map-separate-value(n,c)
    Grammar.prototype.c_ns_flow_map_empty_key_entry.num = 146;

    // [147]
    // c-ns-flow-map-separate-value(n,c) ::=
    //   ':' <not_followed_by_an_ns-plain-safe(c)>
    //   ( ( s-separate(n,c) ns-flow-node(n,c) )
    //   | e-node )
    Grammar.prototype.c_ns_flow_map_separate_value.num = 147;

    // [148]
    // c-ns-flow-map-json-key-entry(n,c) ::=
    //   c-flow-json-node(n,c)
    //   ( ( s-separate(n,c)?
    //   c-ns-flow-map-adjacent-value(n,c) )
    //   | e-node )
    Grammar.prototype.c_ns_flow_map_json_key_entry.num = 148;

    // [149]
    // c-ns-flow-map-adjacent-value(n,c) ::=
    //   ':' ( (
    //   s-separate(n,c)?
    //   ns-flow-node(n,c) )
    //   | e-node )
    Grammar.prototype.c_ns_flow_map_adjacent_value.num = 149;

    // [150]
    // ns-flow-pair(n,c) ::=
    //   ( '?' s-separate(n,c)
    //   ns-flow-map-explicit-entry(n,c) )
    //   | ns-flow-pair-entry(n,c)
    Grammar.prototype.ns_flow_pair.num = 150;

    // [151]
    // ns-flow-pair-entry(n,c) ::=
    //   ns-flow-pair-yaml-key-entry(n,c)
    //   | c-ns-flow-map-empty-key-entry(n,c)
    //   | c-ns-flow-pair-json-key-entry(n,c)
    Grammar.prototype.ns_flow_pair_entry.num = 151;

    // [152]
    // ns-flow-pair-yaml-key-entry(n,c) ::=
    //   ns-s-implicit-yaml-key(flow-key)
    //   c-ns-flow-map-separate-value(n,c)
    Grammar.prototype.ns_flow_pair_yaml_key_entry.num = 152;

    // [153]
    // c-ns-flow-pair-json-key-entry(n,c) ::=
    //   c-s-implicit-json-key(flow-key)
    //   c-ns-flow-map-adjacent-value(n,c)
    Grammar.prototype.c_ns_flow_pair_json_key_entry.num = 153;

    // [154]
    // ns-s-implicit-yaml-key(c) ::=
    //   ns-flow-yaml-node(n/a,c)
    //   s-separate-in-line?
    //   <at_most_1024_characters_altogether>
    Grammar.prototype.ns_s_implicit_yaml_key.num = 154;

    // [155]
    // c-s-implicit-json-key(c) ::=
    //   c-flow-json-node(n/a,c)
    //   s-separate-in-line?
    //   <at_most_1024_characters_altogether>
    Grammar.prototype.c_s_implicit_json_key.num = 155;

    // [156]
    // ns-flow-yaml-content(n,c) ::=
    //   ns-plain(n,c)
    Grammar.prototype.ns_flow_yaml_content.num = 156;

    // [157]
    // c-flow-json-content(n,c) ::=
    //   c-flow-sequence(n,c) | c-flow-mapping(n,c)
    //   | c-single-quoted(n,c) | c-double-quoted(n,c)
    Grammar.prototype.c_flow_json_content.num = 157;

    // [158]
    // ns-flow-content(n,c) ::=
    //   ns-flow-yaml-content(n,c) | c-flow-json-content(n,c)
    Grammar.prototype.ns_flow_content.num = 158;

    // [159]
    // ns-flow-yaml-node(n,c) ::=
    //   c-ns-alias-node
    //   | ns-flow-yaml-content(n,c)
    //   | ( c-ns-properties(n,c)
    //   ( ( s-separate(n,c)
    //   ns-flow-yaml-content(n,c) )
    //   | e-scalar ) )
    Grammar.prototype.ns_flow_yaml_node.num = 159;

    // [160]
    // c-flow-json-node(n,c) ::=
    //   ( c-ns-properties(n,c)
    //   s-separate(n,c) )?
    //   c-flow-json-content(n,c)
    Grammar.prototype.c_flow_json_node.num = 160;

    // [161]
    // ns-flow-node(n,c) ::=
    //   c-ns-alias-node
    //   | ns-flow-content(n,c)
    //   | ( c-ns-properties(n,c)
    //   ( ( s-separate(n,c)
    //   ns-flow-content(n,c) )
    //   | e-scalar ) )
    Grammar.prototype.ns_flow_node.num = 161;

    // [162]
    // c-b-block-header(m,t) ::=
    //   ( ( c-indentation-indicator(m)
    //   c-chomping-indicator(t) )
    //   | ( c-chomping-indicator(t)
    //   c-indentation-indicator(m) ) )
    //   s-b-comment
    Grammar.prototype.c_b_block_header.num = 162;

    // [163]
    // c-indentation-indicator(m) ::=
    //   ( ns-dec-digit => m = ns-dec-digit - x:30 )
    //   ( <empty> => m = auto-detect() )
    Grammar.prototype.c_indentation_indicator.num = 163;

    // [164]
    // c-chomping-indicator(t) ::=
    //   ( '-' => t = strip )
    //   ( '+' => t = keep )
    //   ( <empty> => t = clip )
    Grammar.prototype.c_chomping_indicator.num = 164;

    // [165]
    // b-chomped-last(t) ::=
    //   ( t = strip => b-non-content | <end_of_file> )
    //   ( t = clip => b-as-line-feed | <end_of_file> )
    //   ( t = keep => b-as-line-feed | <end_of_file> )
    Grammar.prototype.b_chomped_last.num = 165;

    // [166]
    // l-chomped-empty(n,t) ::=
    //   ( t = strip => l-strip-empty(n) )
    //   ( t = clip => l-strip-empty(n) )
    //   ( t = keep => l-keep-empty(n) )
    Grammar.prototype.l_chomped_empty.num = 166;

    // [167]
    // l-strip-empty(n) ::=
    //   ( s-indent(<=n) b-non-content )*
    //   l-trail-comments(n)?
    Grammar.prototype.l_strip_empty.num = 167;

    // [168]
    // l-keep-empty(n) ::=
    //   l-empty(n,block-in)*
    //   l-trail-comments(n)?
    Grammar.prototype.l_keep_empty.num = 168;

    // [169]
    // l-trail-comments(n) ::=
    //   s-indent(<n)
    //   c-nb-comment-text b-comment
    //   l-comment*
    Grammar.prototype.l_trail_comments.num = 169;

    // [170]
    // c-l+literal(n) ::=
    //   '|' c-b-block-header(m,t)
    //   l-literal-content(n+m,t)
    Grammar.prototype.c_l_literal.num = 170;

    // [171]
    // l-nb-literal-text(n) ::=
    //   l-empty(n,block-in)*
    //   s-indent(n) nb-char+
    Grammar.prototype.l_nb_literal_text.num = 171;

    // [172]
    // b-nb-literal-next(n) ::=
    //   b-as-line-feed
    //   l-nb-literal-text(n)
    Grammar.prototype.b_nb_literal_next.num = 172;

    // [173]
    // l-literal-content(n,t) ::=
    //   ( l-nb-literal-text(n)
    //   b-nb-literal-next(n)*
    //   b-chomped-last(t) )?
    //   l-chomped-empty(n,t)
    Grammar.prototype.l_literal_content.num = 173;

    // [174]
    // c-l+folded(n) ::=
    //   '>' c-b-block-header(m,t)
    //   l-folded-content(n+m,t)
    Grammar.prototype.c_l_folded.num = 174;

    // [175]
    // s-nb-folded-text(n) ::=
    //   s-indent(n) ns-char
    //   nb-char*
    Grammar.prototype.s_nb_folded_text.num = 175;

    // [176]
    // l-nb-folded-lines(n) ::=
    //   s-nb-folded-text(n)
    //   ( b-l-folded(n,block-in) s-nb-folded-text(n) )*
    Grammar.prototype.l_nb_folded_lines.num = 176;

    // [177]
    // s-nb-spaced-text(n) ::=
    //   s-indent(n) s-white
    //   nb-char*
    Grammar.prototype.s_nb_spaced_text.num = 177;

    // [178]
    // b-l-spaced(n) ::=
    //   b-as-line-feed
    //   l-empty(n,block-in)*
    Grammar.prototype.b_l_spaced.num = 178;

    // [179]
    // l-nb-spaced-lines(n) ::=
    //   s-nb-spaced-text(n)
    //   ( b-l-spaced(n) s-nb-spaced-text(n) )*
    Grammar.prototype.l_nb_spaced_lines.num = 179;

    // [180]
    // l-nb-same-lines(n) ::=
    //   l-empty(n,block-in)*
    //   ( l-nb-folded-lines(n) | l-nb-spaced-lines(n) )
    Grammar.prototype.l_nb_same_lines.num = 180;

    // [181]
    // l-nb-diff-lines(n) ::=
    //   l-nb-same-lines(n)
    //   ( b-as-line-feed l-nb-same-lines(n) )*
    Grammar.prototype.l_nb_diff_lines.num = 181;

    // [182]
    // l-folded-content(n,t) ::=
    //   ( l-nb-diff-lines(n)
    //   b-chomped-last(t) )?
    //   l-chomped-empty(n,t)
    Grammar.prototype.l_folded_content.num = 182;

    // [183]
    // l+block-sequence(n) ::=
    //   ( s-indent(n+m)
    //   c-l-block-seq-entry(n+m) )+
    //   <for_some_fixed_auto-detected_m_>_0>
    Grammar.prototype.l_block_sequence.num = 183;

    // [184]
    // c-l-block-seq-entry(n) ::=
    //   '-' <not_followed_by_an_ns-char>
    //   s-l+block-indented(n,block-in)
    Grammar.prototype.c_l_block_seq_entry.num = 184;

    // [185]
    // s-l+block-indented(n,c) ::=
    //   ( s-indent(m)
    //   ( ns-l-compact-sequence(n+1+m)
    //   | ns-l-compact-mapping(n+1+m) ) )
    //   | s-l+block-node(n,c)
    //   | ( e-node s-l-comments )
    Grammar.prototype.s_l_block_indented.num = 185;

    // [186]
    // ns-l-compact-sequence(n) ::=
    //   c-l-block-seq-entry(n)
    //   ( s-indent(n) c-l-block-seq-entry(n) )*
    Grammar.prototype.ns_l_compact_sequence.num = 186;

    // [187]
    // l+block-mapping(n) ::=
    //   ( s-indent(n+m)
    //   ns-l-block-map-entry(n+m) )+
    //   <for_some_fixed_auto-detected_m_>_0>
    Grammar.prototype.l_block_mapping.num = 187;

    // [188]
    // ns-l-block-map-entry(n) ::=
    //   c-l-block-map-explicit-entry(n)
    //   | ns-l-block-map-implicit-entry(n)
    Grammar.prototype.ns_l_block_map_entry.num = 188;

    // [189]
    // c-l-block-map-explicit-entry(n) ::=
    //   c-l-block-map-explicit-key(n)
    //   ( l-block-map-explicit-value(n)
    //   | e-node )
    Grammar.prototype.c_l_block_map_explicit_entry.num = 189;

    // [190]
    // c-l-block-map-explicit-key(n) ::=
    //   '?'
    //   s-l+block-indented(n,block-out)
    Grammar.prototype.c_l_block_map_explicit_key.num = 190;

    // [191]
    // l-block-map-explicit-value(n) ::=
    //   s-indent(n)
    //   ':' s-l+block-indented(n,block-out)
    Grammar.prototype.l_block_map_explicit_value.num = 191;

    // [192]
    // ns-l-block-map-implicit-entry(n) ::=
    //   (
    //   ns-s-block-map-implicit-key
    //   | e-node )
    //   c-l-block-map-implicit-value(n)
    Grammar.prototype.ns_l_block_map_implicit_entry.num = 192;

    // [193]
    // ns-s-block-map-implicit-key ::=
    //   c-s-implicit-json-key(block-key)
    //   | ns-s-implicit-yaml-key(block-key)
    Grammar.prototype.ns_s_block_map_implicit_key.num = 193;

    // [194]
    // c-l-block-map-implicit-value(n) ::=
    //   ':' (
    //   s-l+block-node(n,block-out)
    //   | ( e-node s-l-comments ) )
    Grammar.prototype.c_l_block_map_implicit_value.num = 194;

    // [195]
    // ns-l-compact-mapping(n) ::=
    //   ns-l-block-map-entry(n)
    //   ( s-indent(n) ns-l-block-map-entry(n) )*
    Grammar.prototype.ns_l_compact_mapping.num = 195;

    // [196]
    // s-l+block-node(n,c) ::=
    //   s-l+block-in-block(n,c) | s-l+flow-in-block(n)
    Grammar.prototype.s_l_block_node.num = 196;

    // [197]
    // s-l+flow-in-block(n) ::=
    //   s-separate(n+1,flow-out)
    //   ns-flow-node(n+1,flow-out) s-l-comments
    Grammar.prototype.s_l_flow_in_block.num = 197;

    // [198]
    // s-l+block-in-block(n,c) ::=
    //   s-l+block-scalar(n,c) | s-l+block-collection(n,c)
    Grammar.prototype.s_l_block_in_block.num = 198;

    // [199]
    // s-l+block-scalar(n,c) ::=
    //   s-separate(n+1,c)
    //   ( c-ns-properties(n+1,c) s-separate(n+1,c) )?
    //   ( c-l+literal(n) | c-l+folded(n) )
    Grammar.prototype.s_l_block_scalar.num = 199;

    // [200]
    // s-l+block-collection(n,c) ::=
    //   ( s-separate(n+1,c)
    //   c-ns-properties(n+1,c) )?
    //   s-l-comments
    //   ( l+block-sequence(seq-spaces(n,c))
    //   | l+block-mapping(n) )
    Grammar.prototype.s_l_block_collection.num = 200;

    // [201]
    // seq-spaces(n,c) ::=
    //   ( c = block-out => n-1 )
    //   ( c = block-in => n )
    Grammar.prototype.seq_spaces.num = 201;

    // [202]
    // l-document-prefix ::=
    //   c-byte-order-mark? l-comment*
    Grammar.prototype.l_document_prefix.num = 202;

    // [203]
    // c-directives-end ::=
    //   '-' '-' '-'
    Grammar.prototype.c_directives_end.num = 203;

    // [204]
    // c-document-end ::=
    //   '.' '.' '.'
    Grammar.prototype.c_document_end.num = 204;

    // [205]
    // l-document-suffix ::=
    //   c-document-end s-l-comments
    Grammar.prototype.l_document_suffix.num = 205;

    // [206]
    // c-forbidden ::=
    //   <start_of_line>
    //   ( c-directives-end | c-document-end )
    //   ( b-char | s-white | <end_of_file> )
    Grammar.prototype.c_forbidden.num = 206;

    // [207]
    // l-bare-document ::=
    //   s-l+block-node(-1,block-in)
    //   <excluding_c-forbidden_content>
    Grammar.prototype.l_bare_document.num = 207;

    // [208]
    // l-explicit-document ::=
    //   c-directives-end
    //   ( l-bare-document
    //   | ( e-node s-l-comments ) )
    Grammar.prototype.l_explicit_document.num = 208;

    // [209]
    // l-directive-document ::=
    //   l-directive+
    //   l-explicit-document
    Grammar.prototype.l_directive_document.num = 209;

    // [210]
    // l-any-document ::=
    //   l-directive-document
    //   | l-explicit-document
    //   | l-bare-document
    Grammar.prototype.l_any_document.num = 210;

    // [211]
    // l-yaml-stream ::=
    //   l-document-prefix* l-any-document?
    //   ( ( l-document-suffix+ l-document-prefix*
    //   l-any-document? )
    //   | ( l-document-prefix* l-explicit-document? ) )*
    Grammar.prototype.l_yaml_stream.num = 211;

    return Grammar;

  }).call(this);

}).call(this);
